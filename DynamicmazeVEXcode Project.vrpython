#region VEXcode Generated Robot Configuration
import math
import random
from vexcode_vr import *

# Brain should be defined by default
brain=Brain()

drivetrain = Drivetrain("drivetrain", 0)
pen = Pen("pen", 8)
pen.set_pen_width(THIN)
left_bumper = Bumper("leftBumper", 2)
right_bumper = Bumper("rightBumper", 3)
front_eye = EyeSensor("frontEye", 4)
down_eye = EyeSensor("downEye", 5)
front_distance = Distance("frontdistance", 6)
distance = front_distance
magnet = Electromagnet("magnet", 7)
location = Location("location", 9)

#endregion VEXcode Generated Robot Configuration

def go_to(x_loc, y_loc):
    # Function to move the robot to a specific coordinate (x_loc, y_loc)
    b = x_loc - location.position(X, MM)
    c = y_loc - location.position(Y, MM)

    if b == 0 and c == 0:
        pass
    else:
        a = math.sqrt(b**2 + c**2)
        angle = math.asin((math.sin(math.pi / 2) * b) / a) / math.pi * 180

        if c < 0:
            angle = 180 - angle

        drivetrain.turn_to_heading(angle, DEGREES)
        drivetrain.drive_for(FORWARD, a, MM)

def follow_left_wall():
    # Follow the left-hand wall (wall-following algorithm)
    if front_eye.is_detecting():
        drivetrain.drive(FORWARD)
    else:
        drivetrain.turn_for(LEFT, 90, DEGREES)
        drivetrain.drive(FORWARD)

def main():
    cords_list = []
    drivetrain.set_drive_velocity(100, PERCENT)
    drivetrain.set_turn_velocity(100, PERCENT)

    # Starting point
    cords_list.append([location.position(X, MM), location.position(Y, MM)])

    
    while not down_eye.detect(RED):  
        if distance.get_distance(MM) > 260:  
            drivetrain.drive_for(FORWARD, 250, MM)
            drivetrain.turn_for(RIGHT, 90, DEGREES)

            # Avoid loops 9check if it is revisiting)
            if len(cords_list) > 2:  
                prev_x = cords_list[-2][0]
                prev_y = cords_list[-2][1]

                # Remove loops 
                if abs(prev_x - location.position(X, MM)) < 5 and abs(prev_y - location.position(Y, MM)) < 5:
                    cords_list.pop()
                    cords_list.pop()
                    brain.clear()
                    brain.print(len(cords_list))

            cords_list.append([location.position(X, MM), location.position(Y, MM)])
            brain.clear()
            brain.print(len(cords_list))
        else:
            drivetrain.turn_for(LEFT, 90, DEGREES)
        wait(5, MSEC)
        pen.set_pen_color(BLUE)
        pen.move(DOWN)

    

    # find the shortest path back to the starting point
    
    pen.set_pen_color(GREEN)
    pen.move(DOWN)

    cords_list.reverse()  # Reverse 

    for i in range(len(cords_list)):
        go_to(cords_list[i][0], cords_list[i][1])

    # Once at home, stop the project
    pen.move(UP)
    stop_project()

vr_thread(main())
